1. Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates

SOLUTION


SELECT DISTINCT CITY
FROM STATION
WHERE CITY LIKE '%a'
OR CITY LIKE '%e'
OR CITY LIKE '%i'
OR CITY LIKE '%o'
OR CITY LIKE '%u';


2. Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.

SOLUTION

SELECT DISTINCT CITY
FROM STATION
WHERE CITY REGEXP '^[aeiouAEIOU]'
AND CITY REGEXP '[aeiouAEIOU]$';

3. Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates

SOLUTION

SELECT DISTINCT CITY 
FROM STATION
WHERE  CITY NOT REGEXP '^[aeiouAEIOU]'

4. Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates

SOLUTION

SELECT DISTINCT CITY 
FROM STATION
WHERE  CITY NOT REGEXP '[aeiouAEIOU]$'

5. Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.

SOLUTION

SELECT DISTINCT CITY
FROM STATION
WHERE  CITY NOT REGEXP '[aeiouAEIOU]$'
OR  CITY NOT REGEXP '^[aeiouAEIOU]';

6. Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.

SOLUTION

SELECT DISTINCT CITY
FROM STATION
WHERE  CITY NOT REGEXP '[aeiouAEIOU]$'
AND CITY NOT REGEXP '^[aeiouAEIOU]';

7. Query the Name of any student in STUDENTS who scored higher than 75. Order your output by the last three characters of each name.
If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by 
ascending ID.


SOLUTION:

SELECT Name
FROM STUDENTS
WHERE Marks >75
ORDER BY RIGHT(name, 3), id;


NOTE: Pay close attention to the question, as more difficult challenges often require new functions to solve the problem.
      In this challenge, we used the RIGHT() function to extract the last three characters from the Name column. The sorting 
      process was done in two steps:
      1. Primary sort: We sorted the names based on the last three characters extracted using RIGHT(Name, 3).
      2. Secondary sort: If multiple names had the same last three characters, we sorted them by ID in ascending order.
